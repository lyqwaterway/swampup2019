node {

    stage('Cleanup & Clone') {
        cleanWs()
        git url: 'https://github.com/jfrogtraining/swampup2019', branch : 'su-121-golang-cicd'
    }

    stage('Install JFrog CLI') {

        dir("su-121-golang-cicd"){

          // This installs and configure JFrog Cli
          // sh "curl -fL https://getcli.jfrog.io | sh"

          withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: CREDENTIALS, usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD']]) {
            sh "jfrog rt config --url ${SERVER_URL} --user ${env.USERNAME} --password ${env.PASSWORD}"
          }
        }
    }

    stage('Build Chart & push it to Artifactory repo') {
        /* Configure helm client to point to k8s cluster */
        dir("su-121-golang-cicd"){
           sh "sed -i 's/0.1.1/0.1.${env.BUILD_NUMBER}/' docker-go-app-chart/Chart.yaml"
           //sh "sed -i 's/latest/${IMAGE_TAG}/g' docker-go-app-chart/values.yaml"
           sh "helm package ./docker-go-app-chart/"
           sh "jfrog rt u '*.tgz' ${REPO} --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER}"
           sh "jfrog rt bce ${env.JOB_NAME} ${env.BUILD_NUMBER}"
           // sh "./jfrog rt dl docker-prod-local/docker-go-app/${IMAGE_TAG}/manifest.json --build-name=${env.JOB_NAME} --build-number=${env.BUILD_NUMBER} "
           sh "jfrog rt bp ${env.JOB_NAME} ${env.BUILD_NUMBER}"
        }
    }
}
